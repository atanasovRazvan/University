// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: festival.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace NetworkingGrpc {
  public static partial class FestivalService
  {
    static readonly string __ServiceName = "festival.FestivalService";

    static readonly grpc::Marshaller<global::NetworkingGrpc.SubscribeRequest> __Marshaller_festival_SubscribeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkingGrpc.SubscribeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkingGrpc.ServerReply> __Marshaller_festival_ServerReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkingGrpc.ServerReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkingGrpc.LoginRequest> __Marshaller_festival_LoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkingGrpc.LoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkingGrpc.SaveBiletRequest> __Marshaller_festival_SaveBiletRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkingGrpc.SaveBiletRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkingGrpc.FindSpectacolRequest> __Marshaller_festival_FindSpectacolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkingGrpc.FindSpectacolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkingGrpc.GetAllRequest> __Marshaller_festival_GetAllRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkingGrpc.GetAllRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkingGrpc.GetAllByDateRequest> __Marshaller_festival_GetAllByDateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkingGrpc.GetAllByDateRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::NetworkingGrpc.SubscribeRequest, global::NetworkingGrpc.ServerReply> __Method_subscribe = new grpc::Method<global::NetworkingGrpc.SubscribeRequest, global::NetworkingGrpc.ServerReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "subscribe",
        __Marshaller_festival_SubscribeRequest,
        __Marshaller_festival_ServerReply);

    static readonly grpc::Method<global::NetworkingGrpc.LoginRequest, global::NetworkingGrpc.ServerReply> __Method_login = new grpc::Method<global::NetworkingGrpc.LoginRequest, global::NetworkingGrpc.ServerReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "login",
        __Marshaller_festival_LoginRequest,
        __Marshaller_festival_ServerReply);

    static readonly grpc::Method<global::NetworkingGrpc.SaveBiletRequest, global::NetworkingGrpc.ServerReply> __Method_saveBilet = new grpc::Method<global::NetworkingGrpc.SaveBiletRequest, global::NetworkingGrpc.ServerReply>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "saveBilet",
        __Marshaller_festival_SaveBiletRequest,
        __Marshaller_festival_ServerReply);

    static readonly grpc::Method<global::NetworkingGrpc.FindSpectacolRequest, global::NetworkingGrpc.ServerReply> __Method_findSpectacol = new grpc::Method<global::NetworkingGrpc.FindSpectacolRequest, global::NetworkingGrpc.ServerReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "findSpectacol",
        __Marshaller_festival_FindSpectacolRequest,
        __Marshaller_festival_ServerReply);

    static readonly grpc::Method<global::NetworkingGrpc.GetAllRequest, global::NetworkingGrpc.ServerReply> __Method_getAllSpectacol = new grpc::Method<global::NetworkingGrpc.GetAllRequest, global::NetworkingGrpc.ServerReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getAllSpectacol",
        __Marshaller_festival_GetAllRequest,
        __Marshaller_festival_ServerReply);

    static readonly grpc::Method<global::NetworkingGrpc.GetAllByDateRequest, global::NetworkingGrpc.ServerReply> __Method_getSpectacolByDate = new grpc::Method<global::NetworkingGrpc.GetAllByDateRequest, global::NetworkingGrpc.ServerReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getSpectacolByDate",
        __Marshaller_festival_GetAllByDateRequest,
        __Marshaller_festival_ServerReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::NetworkingGrpc.FestivalReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FestivalService</summary>
    [grpc::BindServiceMethod(typeof(FestivalService), "BindService")]
    public abstract partial class FestivalServiceBase
    {
      public virtual global::System.Threading.Tasks.Task subscribe(global::NetworkingGrpc.SubscribeRequest request, grpc::IServerStreamWriter<global::NetworkingGrpc.ServerReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::NetworkingGrpc.ServerReply> login(global::NetworkingGrpc.LoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task saveBilet(grpc::IAsyncStreamReader<global::NetworkingGrpc.SaveBiletRequest> requestStream, grpc::IServerStreamWriter<global::NetworkingGrpc.ServerReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::NetworkingGrpc.ServerReply> findSpectacol(global::NetworkingGrpc.FindSpectacolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::NetworkingGrpc.ServerReply> getAllSpectacol(global::NetworkingGrpc.GetAllRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::NetworkingGrpc.ServerReply> getSpectacolByDate(global::NetworkingGrpc.GetAllByDateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FestivalService</summary>
    public partial class FestivalServiceClient : grpc::ClientBase<FestivalServiceClient>
    {
      /// <summary>Creates a new client for FestivalService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FestivalServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FestivalService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FestivalServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FestivalServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FestivalServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::NetworkingGrpc.ServerReply> subscribe(global::NetworkingGrpc.SubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::NetworkingGrpc.ServerReply> subscribe(global::NetworkingGrpc.SubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribe, null, options, request);
      }
      public virtual global::NetworkingGrpc.ServerReply login(global::NetworkingGrpc.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NetworkingGrpc.ServerReply login(global::NetworkingGrpc.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_login, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NetworkingGrpc.ServerReply> loginAsync(global::NetworkingGrpc.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return loginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NetworkingGrpc.ServerReply> loginAsync(global::NetworkingGrpc.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_login, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::NetworkingGrpc.SaveBiletRequest, global::NetworkingGrpc.ServerReply> saveBilet(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return saveBilet(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::NetworkingGrpc.SaveBiletRequest, global::NetworkingGrpc.ServerReply> saveBilet(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_saveBilet, null, options);
      }
      public virtual global::NetworkingGrpc.ServerReply findSpectacol(global::NetworkingGrpc.FindSpectacolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return findSpectacol(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NetworkingGrpc.ServerReply findSpectacol(global::NetworkingGrpc.FindSpectacolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_findSpectacol, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NetworkingGrpc.ServerReply> findSpectacolAsync(global::NetworkingGrpc.FindSpectacolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return findSpectacolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NetworkingGrpc.ServerReply> findSpectacolAsync(global::NetworkingGrpc.FindSpectacolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_findSpectacol, null, options, request);
      }
      public virtual global::NetworkingGrpc.ServerReply getAllSpectacol(global::NetworkingGrpc.GetAllRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getAllSpectacol(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NetworkingGrpc.ServerReply getAllSpectacol(global::NetworkingGrpc.GetAllRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getAllSpectacol, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NetworkingGrpc.ServerReply> getAllSpectacolAsync(global::NetworkingGrpc.GetAllRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getAllSpectacolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NetworkingGrpc.ServerReply> getAllSpectacolAsync(global::NetworkingGrpc.GetAllRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getAllSpectacol, null, options, request);
      }
      public virtual global::NetworkingGrpc.ServerReply getSpectacolByDate(global::NetworkingGrpc.GetAllByDateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getSpectacolByDate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NetworkingGrpc.ServerReply getSpectacolByDate(global::NetworkingGrpc.GetAllByDateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getSpectacolByDate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NetworkingGrpc.ServerReply> getSpectacolByDateAsync(global::NetworkingGrpc.GetAllByDateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getSpectacolByDateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NetworkingGrpc.ServerReply> getSpectacolByDateAsync(global::NetworkingGrpc.GetAllByDateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getSpectacolByDate, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FestivalServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FestivalServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FestivalServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_subscribe, serviceImpl.subscribe)
          .AddMethod(__Method_login, serviceImpl.login)
          .AddMethod(__Method_saveBilet, serviceImpl.saveBilet)
          .AddMethod(__Method_findSpectacol, serviceImpl.findSpectacol)
          .AddMethod(__Method_getAllSpectacol, serviceImpl.getAllSpectacol)
          .AddMethod(__Method_getSpectacolByDate, serviceImpl.getSpectacolByDate).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FestivalServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_subscribe, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::NetworkingGrpc.SubscribeRequest, global::NetworkingGrpc.ServerReply>(serviceImpl.subscribe));
      serviceBinder.AddMethod(__Method_login, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NetworkingGrpc.LoginRequest, global::NetworkingGrpc.ServerReply>(serviceImpl.login));
      serviceBinder.AddMethod(__Method_saveBilet, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::NetworkingGrpc.SaveBiletRequest, global::NetworkingGrpc.ServerReply>(serviceImpl.saveBilet));
      serviceBinder.AddMethod(__Method_findSpectacol, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NetworkingGrpc.FindSpectacolRequest, global::NetworkingGrpc.ServerReply>(serviceImpl.findSpectacol));
      serviceBinder.AddMethod(__Method_getAllSpectacol, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NetworkingGrpc.GetAllRequest, global::NetworkingGrpc.ServerReply>(serviceImpl.getAllSpectacol));
      serviceBinder.AddMethod(__Method_getSpectacolByDate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NetworkingGrpc.GetAllByDateRequest, global::NetworkingGrpc.ServerReply>(serviceImpl.getSpectacolByDate));
    }

  }
}
#endregion
